// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Student {
  rollId               String            @id @default(cuid())
  username             String
  firstName            String
  lastName             String
  middleName           String?
  email                String            @unique
  password             String
  dateOfBirth          DateTime?
  contact              String?
  address              StudentAddress?
  gender               Gender
  schoolClass          SchoolClass[]
  teacher              StudentTeacher[]
  admissionDate        DateTime?
  religion             String?
  nationality          String?
  guardianName         String
  guardianNumber       String?
  relationsToGuardian  String?
  medicalConditions    String?
  allergies            String?
  photo                String?
  previousSchool       String?
  academicRecords      AcademicRecords[]
  status               StudentStatus     @default(active)
  role                 ROLE              @default(student)
  emergencyContact     String?
  emergencyContactName String?
  ticket               Tickets[]
  notice               Notification[]
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt

  @@index([firstName, lastName, email])
}

model Teacher {
  employeeId           String            @id @default(cuid())
  username             String
  firstName            String
  lastName             String
  middleName           String?
  email                String            @unique
  password             String
  dateOfBirth          DateTime?
  contact              String?
  address              TeacherAddress?
  gender               Gender
  qualification        String?
  specialization       String?
  employmentDate       DateTime?
  nationality          String?
  religion             String?
  previousSchool       String?
  yearsOfExperience    Int?
  photo                String?
  status               UserStatus     @default(active)
  role                 ROLE              @default(teacher)
  biography            String?
  schoolClass          SchoolClass[]
  student              StudentTeacher[]
  studentRecords       AcademicRecords[]
  ticket               Tickets[]
  notice               Notification[]
  emergencyContact     String?
  emergencyContactName String?
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt

  @@index([firstName, lastName, email])
}

model User {
  employeeId           String            @id @default(cuid())
  username             String
  firstName            String
  lastName             String
  middleName           String?
  email                String            @unique
  password             String
  dateOfBirth          DateTime?
  contact              String?
  address              UserAddress?
  gender               Gender
  qualification        String?
  specialization       String?
  employmentDate       DateTime?
  nationality          String?
  religion             String?
  previousSchool       String?
  yearsOfExperience    Int?
  photo                String?
  status               UserStatus     @default(active)
  role                 ROLE           
  biography            String?
  ticket               Tickets[]
  notice               Notification[]
  emergencyContact     String?
  emergencyContactName String?
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt

  @@index([firstName, lastName, email])
}

model StudentTeacher {
  student   Student  @relation(fields: [studentId], references: [rollId])
  studentId String
  teacher   Teacher  @relation(fields: [teacherId], references: [employeeId])
  teacherId String
  createdAt DateTime @default(now())

  @@id([studentId, teacherId])
}

model StudentAddress {
  GPS       String?
  location  String?
  student   Student  @relation(fields: [studentId], references: [rollId], onDelete: Cascade)
  studentId String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([studentId])
  @@index([GPS, location])
}

model TeacherAddress {
  GPS       String?
  location  String?
  teacher   Teacher  @relation(fields: [teacherId], references: [employeeId], onDelete: Cascade)
  teacherId String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([teacherId])
  @@index([GPS, location])
}

model UserAddress {
  GPS       String?
  location  String?
  user   User  @relation(fields: [userId], references: [employeeId], onDelete: Cascade)
  userId String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([userId])
  @@index([GPS, location])
}

model SchoolClass {
  classType   ClassCategory
  schoolClass ClassType
  studentId   String
  student     Student       @relation(fields: [studentId], references: [rollId])
  teacherId   String
  teacher     Teacher       @relation(fields: [teacherId], references: [employeeId])

  @@id([studentId, teacherId])
  @@index([classType, schoolClass])
}

model AcademicRecords {
  academicYear    DateTime
  term            TERM
  courseCode      String?
  courseName      String
  courseTeacher   Teacher  @relation(fields: [teacherId], references: [employeeId])
  teacherId       String
  studentId       String
  student         Student  @relation(fields: [studentId], references: [rollId])
  grades          String
  studentPosition String?
  teacherComments String[]
  recommendations String

  @@id([studentId, term, academicYear])
  @@index([term, courseName])
}


model Tickets {
  ticketId Int @id @default(autoincrement())
  ticketName  String
  reason  String
  ticketItem  String
  ticketDate  DateTime? @default(now())
  ticketStatus Status
  student Student? @relation(fields: [studentId], references: [rollId], onDelete: Cascade)
  studentId  String?
  teacher Teacher? @relation(fields: [teacherId], references: [employeeId], onDelete: Cascade)
  teacherId String?
  user User? @relation(fields: [userId], references: [employeeId], onDelete: Cascade)
  userId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

enum ClassCategory {
  kindergarten
  primary
  jhs
}

model Notification {
  id Int @id @default(autoincrement())
  content String
  link_to_action String
  isRead Boolean @default(false)
  studentId String? 
  student Student? @relation(fields: [studentId], references: [rollId], onDelete: Cascade)
  teacherId String? 
  teacher Teacher? @relation(fields: [teacherId], references: [employeeId], onDelete: Cascade)
  userId String?
  user User? @relation(fields: [userId], references: [employeeId], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

enum ClassType {
  kindergarten1
  kindergarten2
  primary1
  primary2
  primary3
  primary4
  primary5
  primary6
  jhs1
  jhs2
  jhs3
}

enum Gender {
  male
  female
}

enum StudentStatus {
  active
  graduated
  droppedout
  deactivated
}

enum UserStatus {
  active
  onleave
  retired
}

enum TERM {
  firstterm
  secondterm
  thirdterm
}

enum ROLE {
  student
  teacher
  headmaster
  proprietor
  admin
  nonteaching
}


enum Status {
  Pending
  Approved
  Rejected
}